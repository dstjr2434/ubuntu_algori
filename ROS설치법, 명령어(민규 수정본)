ROS를 설치하기 위해서는 BASH쉘에서 아래 사이트의 1.2~1.6.1까지의 각 명령어를 실행한다.

http://wiki.ros.org/melodic/Installation/Ubuntu

1.2
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'

1.3
sudo apt install curl # if you haven't already installed curl
curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -

1.4
sudo apt update
sudo apt install ros-melodic-desktop-full

1.5
echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
source ~/.bashrc

1.6
sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential

1.6.1
sudo apt install python-rosdep
sudo rosdep init
rosdep update


설치 완료 후
--------------------------------------------------------------------------------
터미널에서 gedit .bashrc 치면 메모장 나오는데, 그때 맨아래 아래 코드들을 써놓으면 된다.
--------------------------------------------------------------------------------

[sudo apt] 명령어로 설치를 하게되면
source /opt/ros/melodic/setup.bash 폴더안에 들어간다.
여기 폴더에는 실행파일만 들어가고 사용자는 이를 불러와서 사용한다.

source ~/catkin_ws/devel/setup.bash
여기 폴더는 소스파일이 들어가고 사용자가 빌드를 해서 사용한다.

#아래 두줄은 ROS<->우분투를 연결시켜주는 소스이다.
source /opt/ros/melodic/setup.bash
source ~/catkin_ws/devel/setup.bash

# 아래 alias 세줄은 명령어 설정이다. (우리가 폴더 위치를 편하게 이동하기 위해)(cw,cs,cm)
alias cw="cd ~/catkin_ws"
alias cs="cd ~/catkin_ws/src"
alias cm="cd ~catkin_ws && catkin_make"

# 아래 alias 두줄은
# 첫번째줄은 bash창을 여는 명령어 설정(eb)
# 두번째줄은 bash창을 열어서 작성할것을 하고 저장하는 명령어 설정(sb)
alias eb="gedit ~/.bashrc"
alias sb="source ~/.bashrc"
-----------------------------------------------------------------------------------
VS코드에서 실행하는방법
1. VS코드 상단 File -> Open Folder -> catkin_ws -> 확인

pkg를 만드는 명령어
~/catkin_ws/scs 위치에서 아래 명령어를 쳐준다.
catkin_create_pkg 패키지이름 roscpp std_msgs message_generation

package.xml 에서 (패키지 생성되면 VS코드에 생성될꺼임) 
CMakeLists.txt 에서 빌드 확인 잘해야함!! 예를들어 OPENCV 사용할꺼면 CMakeLists.txt에 들어있어야함(?)

--------------------------------------------------------------
★★★★기본 세팅되어있는 상태에서 새로운 패키지 만드는 방법★★★★
"cs" 위치에서
catkin_create_pkg (폴더이름) roscpp std_msgs message_generation
cd (폴더이름)
mkdir msg
mkdir scripts

VS코드에서 C++은 src 폴더에서 (이름).cpp
vs코드에서 python은 scripts 폴더에서 (이름).py

CMakeList : 이전CMakeList 참고하여 파일명 수정 등등 진행.

package.xml
16줄 : 중간에 MIT 로 변경
59줄 넣기:  <depend>rospy</depend>

파이썬 코드의 경우에는 권한부여! (아래 하는방법 있음)
---------------------------------------------------------------
--------------기본 명령어---------------------------------------
ctrl + C = 터미널에서 실행중인것 종료
ctrl + Alt + T = 터미널 Shell 창 띄우기
window key + 화살표
sudo : 관리자 권한 실행
cd : change directory
pwd : 현재 위치 출력
ls : 현재 위치한 곳의 파일 확인
.. : 상위 디렉토리 이동 ed) cd ..
ls -a : 숨김 파일 확인

----------권한부여--------------
ls -l : drw 종류(?) 확인... 자세히보기!
만약 rw 밖에 없어서 x권한을 주고싶다면?
x권한을 주려면 chmod +x (이름)
x권한을 뺏으려면 chmod -x (이름)
ex)chmod +x yh_sub_1.cpp

전부다 x 권한 주기려면??
chmod +x *

-------------------------
cd : 홈 디렉토리 이동
echo 메아리
touch : 파일 만들기
gedit : 파일을 연다
gedit .bashrc   bash쉘창이 열릴때마다 실행하는 메모장 같은 역
cat : 내용물 읽어옴
/ 절대경로
rm 삭제
mkdir (이름) 폴더 생성
rmdir (이름) 폴더 삭제
cp (이름) /경로
cp (이름) /home/aaa/mydir할
-----메모장 안에 기본적(?)쓰는것----
자료형 변수이름
time stamp
int32 data
----------터미널 나누는법------------
sudo apt install terminator

가로로 나누기
ctrl + shift + O
세로로 나누기
ctrl + shift + e
창 이동
ctrl + tab
ctrl + shift + tab
창 닫기
ctrl + shift + w
--------★ros master 키는 명령어--------
roscore
(roscore 입력 전에 cm 해줘야함)

--------★ros node 켜는 명령어-----------
rosrun 패키지이름 노드이름
ex) rosrun topic_tutorial my_publisher
ex) rosrun topic_tutorial py_publisher.py  (파이썬의경우 확장자까지 작성해야함)
ex) rosrun topic_tutorial my_subscriber

---------그 외 명령어------
rostopic
rostopic list 토픽이름            리스트를 출력
rostopic info 토픽이름(/my_topic) 토픽의 정보를 출력
rostopic echo 토픽이름(/my_topic) 토픽의 내용을 출력

그래프 모양으로 통신 형태 확인하기
rqt_graph

------------수업내용----------------
클래스 안에 있는거를 꺼내쓸때는 . 이고
라이브러리 안에 있는거 쓸때는 :: 이다.
패키지 생성시에는 'cs' 위치에서 생성

---------------------
pckage.xml 파일은 패키지에 대한 정보를 넣어주는곳.
패키지 이름이 맞는지 확인, 라이센스 본인이 선택. (수업은 MIT 사용)
51~59 의존성 확인.
59 : <depend>rospy</depend> 는 우리가 추가한 구문임.

----------------------
CMakeLists.txt 파일도 위와 비슷
14: rospy 는 우리가 추가한 구문임.
51~54 : 우리가 입력한 구문이 일부 있음.
71~73 : 우리가 입력(수정)한 구문이 일부 있음. 우리가 직접 만든 메세지를 generate하는 부분임.
107 : 주석 풀어줌.
136~137 : 수정 확인
148~149 : 수정 확인
165: 파이썬 코드 실행시 필요하므로 확인.

-----------파이썬 코드-----------
맨위에 넣어주자.
#!/usr/bin/python
#-*- coding: utf-8 -*-
한글을 입력해도 깨지지 않도록 해주는 코드임.



---------서비스-----------
폴더위치: service_tutorial
파일명: my_server_define.cpp

메모장이름 형식: (이름).srv

메모장 내용
(request 부분)
(만약 변수를 1개 추가하고싶으면 아래 int64 c)
int64 a
int64 b
---
int64 result
string error     #문자열 사용할 때 추가
(response 부분)

------더하기 빼기 곱하기 나누기 define하여 사용하기--------
c++ 기준
폴더위치: service_tutorial
파일명: my_server_define.cpp

기본세팅은 (1) 더하기로 코딩되어 있도록 코드를 작성했음.

더하기에서 빼로 바꾸기.
rosparam set /calculation_method 2
더하기에서 곱하기로 바꾸기.
rosparam set /calculation_method 3
더하기에서 나누기로 바꾸기.
rosparam set /calculation_method 4

파이썬 기준
rosparam
rosparam list
rrosparam set /calculation_method 2
rosparam get /calculation_method 2

---c++ 자료형---
파이썬에서는 문자 자료형 일치하지만
c++ 에서는 일치하지 않음...
로스 위키에 std::vector 로 사용하라고 되어있음.

--------python3 설치하기--------
파이썬 코드 맨위에 저장할때
#!/usr/bin/python3
#-*- coding: utf-8 -*-
---------------------------------------------------------
터미널창에서
pip3 install rospkg
->python install package3, 로스의 패키지에 파이썬 3버전을 설치한다.
--------------------------------------------------------
sudo apt install python3- pip
apt=>리눅스에서 사용하는 advanced package tool
python-pip3설치 파일을 다운받는다.

---------------거북이 교육용--------------------
터미널에서
rosrun turtlesim turtlesim_node
이 교육용이 무슨 토픽? 무슨 서비스일까??
rostopic list
rostopic info /turtle1/cmd_vel			//퍼블리셔None Subscriber on
rostopic info /turtle1/color_sensor		//퍼블리셔on   Subscriber None
rostopic info /turtle1/pose			//퍼블리셔on   Subscriber None

rostopic echo /turtle1/color_sensor		// 퍼블리셔on 이므로 정보 확인 가능
rostopic echo /turtle1/pose			// 퍼블리셔on 이므로 정보 확인 가능

rosservice list					// 로스 서비스 목록 확인하는 명령어
rosservice info /turtle1/teleport_absolute	// 절대위치로 거북이를 옮겨보자..
rqt						// rqt 창 열기

거북이 생성하는 기능::: rqt창에서 Service에서 /spawn 하면 Call 누르면 생성.
터미널에서 명령어로도 가능함. rosservice call /spawn 탭

-----turtleSim 백그라운드 배경은 param에 저장되어있다!!------
배경 색깔을 바꿔볼까?
rosparam list
rosparam get /turtlesim/bacckground_b		// blue 색상 확인
rosparam set /turtlesim/bacckground_b 0		// blue 색상 0으로 세팅

rosrun turtle turtle_teleop_key			// 키보드 방향키로 거북이 움직임

---만약 어떤 통신(Pul, Sub) 진행중일때 확인하는법---음
rostopic info /turtle1/cmd_vel			//뒤에 cmd_vel은 바뀔 수 있음!(?)
rostopic echo /turtle1/cmd_vel			//뒤에 cmd_vel은 바뀔 수 있음!(?)
rosmsg geometry_msgs/Twist
--------거북이 내가 만든 pub 노드 하는법--------
cm
roscore
rosrun turtlesim turtlesim_node		// 창 켜놓고
rosrun yh_turtle yh_turtle_move.py	// Vs코드에서 만든 파일 실행한다.

-----명령어 설명------
rostopic echo는 출력해주는 명령어!

-----거북이 키보드로 조작하 패키지 설치----
최초 프로그램 설치 명령어
sudo apt install ros-meodic-teleop-twist-keyboard

거북이 조작 입력하는 파이썬 키보드 불러오기
rosrun teleop_twist_keyboard teleop_twist_keyboard.py	//터미널창에 커서 놓고 키보드 입력해야함

(다른창에서) 출력값보려면
rostopic echo /cmd_vel

--------------------------------------------------------------------------------
pub --(/cmd_vel)--> pub_sub --(/turtle1/cmd_vel)--> sub 형태로 거북이 컨트롤 하는법

// 1번 설명: 내가 작성한 파이썬 코드!
1. cm, roscore

2. pub_sub 부분의 코드는 작성해야함.
파일명: yh_turtle_keyboard.py

rosrun yh_turtle yh_turtle_keyboard.py

// 3번 설명: 거북이 파일 열기 (sub부분) 여기서 토픽이름은 /turtle1/cmd_vel
3. rosrun turtlesim turtlesim_node

// 4번 설명:  키보드 입력부분 (pub부분) 여기서 토픽 이름은 /cmd_vel
4. rosrun teleop_twist_keyboard teleop_twist_keyboard.py

-------거북이 절대값 시작하기, 흔적 클리어시키기-------
파일명:yh_turtle_circle.py

파이썬 내부 코드 상단에 아래 두줄 넣어줘야함.
from turtlesim.srv import TeleportAbsolute  # 거북이 절대좌표
from std_srvs.srv import Empty		# 클리어

(사용법 확인)터미널창에서
rosservice info /turtle1/teleport_absolute
rosservice info /clear
위 사용법 Args를 참고하여 파이썬 내부 코드를 Args에 맞춰 작성한다.
-----Close loop 개념 파악! (220408연습문제 4번)----
open loop : 지정장소로 이동하고 끝!
close loop : 피드백을 준다!! 보정!!
-------------------------------------------

-----Sub노드에서 x,y,theta 출력값 확인하는 명령어!-------
출력값 확인 명령어
rostopic echo /(이름)/pose
rostopic echo /turtle1/pose

------클래스 상속하는법-------
클래스 상속시에는 같은 패키지 안에 소스파일이 있어야한다.

폴더: yh_turtle_triangle

scripts : yh_turtle_square.py

위에 아래 from을 이용하여 기존의 파일 소스를 참조한다.
from yh_turtle_triangle import TurtleTriangle

1.클레스안에 같은 함수이름을 작성하면, 덮어서 씌우게되며,
2.기존의 참조해오는 클래스 안의 함수는 작성하지 않아도 그대로 유지된다.
3.새로운 함수 이름으로 불러온 클래스 안에 작성하면 함수가 추가되는것이다.

여기에서는 def run(self): 의 함수를 덮어씌웠다.


----220408 연습문제 과제심화 (펜 색상, 두께 변경)----
Pen 세팅하기!
파일명: yh_turtle_triangle
폴더: yh_turtle_pen.py

1. rosrunservice list
2. rosservice info turtle1/set_pen	  #정보 확인
3. rossrv show turtlesim/SetPen		  # turtlesim/SetPen 서비스


---키보드 설정키 입력시 + 펜 세팅하기!!--
파일명: yh_turtle_triangle
폴더: yh_turtle_keyboard_pen.py


1. cm, roscore
2. pub_sub 부분의 코드는 작성해야함.
폴더: yh_turtle_keyboard_pen.py
// 3번 설명: 거북이 파일 열기 (sub부분) 여기서 토픽이름은 /turtle1/cmd_vel
3. rosrun turtlesim turtlesim_node
// 4번 설명:  키보드 입력부분 (pub부분) 여기서 토픽 이름은 /cmd_vel
4. rosrun teleop_twist_keyboard teleop_twist_keyboard.py

-------원하는 지점(Goal) 이동하기---------------
파일명: yh_turtle_triangle
폴더: yh_turtle_goal.py

rostopic list			# 그냥 리스트 확인할때 쓰는 명령어!
rostopic info /turtle1/pose	# 토픽이름 사용, 타입 등 정보 확인

구조: 노드1(pub_sub?) <-> 노드2(pub_sub?)
내가 만든 노드가 노드2라고할때
내가 만든 노드기준 pub 역할 토픽! (pub으로 보내는 토픽): /turtle1/cmd_vel
내가 만든 노드기준 sub 역할 토픽! (내가 받는 토픽) : /turtle1/pose

--- -----laucn 활용해서 한번에 키는법-------------------------
로스런치
패키: yh_turtle_triangle
폴더: launch
파일명: yh_turtle_keyboard_pen.py

파일명 안의 코드
<launch>
    <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard" />
    <node pkg="turtlesim" type="turtlesim_node" name="turtlesim" />
    <node pkg = "yh_turtle_triangle" type="yh_turtle_keyboard_pen.py" name="yh_turtle_keyboard_pen" />
</launch>

터미널에서 실행 시키는 명령어
roslaunch yh_turtle_triangle yh_turtle_keyboard.launch
	     패키지 파일명	     파일명

---------launch에서 키보드 입력까지 받는방법!------------------
만약 거북이 실행파일(turtlesim_node)을 2개 키고싶다면 파일명을 1,2로 나눠서 2줄쳐주면된다.
또한, 아웃풋을 주려면 맨뒤에 output="screen" 이런식으로 추가해주면된다.

<launch>
	<!-- <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard"/> -->
        <node pkg="turtlesim" type="turtlesim_node" name="turtlesim1" />
        <node pkg="turtlesim" type="turtlesim_node" name="turtlesim2" />
        <node pkg = "yh_turtle_triangle" type="yh_turtle_keyboard_pen.py" name="yh_turtle_keyboard_pen" output="screen" />
</launch>

위 코드를 기준으로
키보드로 입력받아서 r,g,b,widh 바꾸려면 터미널창을 2개로 나눠서 실행해야함.

1. rosrun teleop_twist_keyboard teleop_twist_keyboard.py
2. roslaunch yh_turtle_triangle_yh_turtle_keyboard.launch
만약 이렇게 실행하면
-----------launch에서 그룹 설정 하는방법!-----

아래는 주석처리한 부분이 추가된 코드이다.
아래 주석을 풀면 그룹 처리를 할 수도 있다.
<launch>
    <!-- <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard"/> -->
    <!-- <group ns="1"> -->
        <node pkg="turtlesim" type="turtlesim_node" name="turtlesim1" />
        <node pkg="turtlesim" type="turtlesim_node" name="turtlesim2" />
        <node pkg = "yh_turtle_triangle" type="yh_turtle_keyboard_pen.py" name="yh_turtle_keyboard_pen" output="screen" />
    <!-- </group> -->
</launch>

-------------ROS의 전체적인 그림 설명----------------
코딩을 하거나 ros내 파일을 프로그램은 실행시키면 그것을 노드라고한다.
각 노드가 모여서 패키지가 된다.
우리가 계속한게 패키지 만들고, 그 안에 노드를 만든 과정을 했다.
그 노드는, ++파일 or 파이썬 파일이이다.

노드간의 통신 종류는 아래 3가지이다.
1. topic
(Publisher ---> Subscriber 통신)
퍼블리시만 할수있는 노드를 퍼블리셔노드라하고
서브스크라이브만 할수있는 노드를 서브스크라이브 노드라고한다


퍼블리셔는 보내기만하고 서브스크라이버는 받기만한다.
퍼블리셔는 서브스크라이버로 메시지 형태로 보내준다.

주는 노드와 받는노드 간의 프로토콜을 맞춰줘야 기계어로 전송되는 토픽이 정확하게 연결되기때문이다.(010101010101 형식)

메시지는 우리가 만들어놓은 메시지가 될 수도 있고, melodic에서 가져온 msg가 될수도있다 
ex) from geometry_msgs.msg import Twist 처럼 메세지를 사용할수도있다.
ex) 내가 만든 메세지에 저장하는 코드: time stamp, int32 data

위에서 ---> 는 메세지가 지나가는 길 이라고 보면된다.
위에서 ---> 를 구별하는게 토픽이름이다.
위에서 ---> 자동차전용도로, 자전거전용도로, 도보 등등 어떤 특정한 타입만 지나갈수 있는게 토픽타입설정이다.

토픽은 단방향 통신이다.
따라서, 토픽은 메시지를 보내주고 난 후 리턴할 필요가 없기 때문이다
N:1, 1:1, 1:N 통신이 가능한 이유도 단방향 통신이기 때문이다.


2. service
(server <---> client)
인터넷의 예로, 브라우저가 클라이언트이다.
브라우저에서 www.naver.com을 입력한 경우를 생각하면된다.
서버는 항상 켜져있어야하며, 클라이언트가 서버에 요청하는 과정이 먼저다.
클라이언트가 서버에 요청하면, 서버가 클라이언트의 요청정보를 다시 리턴해주고 이를 출력해준다.

서비스가 1:1 통신만 가능한 이유는 반환값이 있기때문이다.
따라서, 서비스 이름이 같으면 나중에 생성하려는 서비스는 연결되지 않는다.
service는 동기/비동기중에 동기 통신이다.

위에서 <---->의 이름이 서비스이름.
위에서 <---->를 왔다갔다 하는 data타입이 서비스타입.

3. action (잘 안씀)


---노드 개념 정리 ---
한개의 노드 안에는 client, sub, pub 등 여러개가 들어갈 수 있다.
1개의 노드 = client 역할만 할수도 있고
1개의 노드 = pub, sub 역할을 할수도 있고
1개의 노드 = client, sub, pub 역할을 할수도 있다.

----launch에서 param사용하기------
launch를 사용하는 이유는 cmd창을 여러개 켜서 명령어를 적어 실행시켜야 할 프로그램들을 하나의 파일로 모아서 편하게 실행시키기 위함이다.
즉 터미널에서 명령어 치는것과, launch에 저장해서 실행하는것과 같은 결과를 가져올 수 있다.
(아래 1,2 같은 결과)

1. 터미널 명령어
rosparam set / turtlesim/background_r 128
rosparam set / turtlesim/background_g 128
rosparam set / turtlesim/background_b 128

2. launch 코드 작성
<launch>
        <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard"/>
        <node pkg="turtlesim" type="turtlesim_node" name="turtlesim" />
        <node pkg="yh_turtle_triangle" type="yh_turtle_keyboard.py" name="yh_turtle_keyboard" output="screen" />
        <param name="/turtlesim/background_r" value="128" />
        <param name="/turtlesim/background_g" value="128" />
        <param name="/turtlesim/background_b" value="128" />
</launch>


-----launch 코드작성법 추가설명----
<args name="r" default="128" />
# defaul=128은 값이 없을경우 128로 하겠다는 의미
<param name="/turtlesim/background_r" value="$(arg r)" />
# arg 중에서 r 갖다쓰겠다는 의미.

r,g,b 전체 적용코드
<launch>
        <arg name="r" default="128" />
        <arg name="g" default="128" />
        <arg name="b" default="128" />
        <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard"/>
        <node pkg="turtlesim" type="turtlesim_node" name="turtlesim" />
        <node pkg="yh_turtle_triangle" type="yh_turtle_keyboard.py" name="yh_turtle_keyboard" output="screen" />
        <param name="/turtlesim/background_r" value="$(arg r)" />
        <param name="/turtlesim/background_g" value="$(arg g)" />
        <param name="/turtlesim/background_b" value="$(arg b)" />
</launch>

터미널에서 명령어 치는법
roslaunch yh_turtle_triangle yh_turtle_keyboard.launch r:=255 g:=255 b:255

-------노드간 토픽이름 바꿔서 실행시키기------
토픽 이름을 바꿔서 노드간 토픽 연결을 하나씩 다 할 필요없이
비교적 손쉽게 터미널창에서 launch 한번만 명령어 입력하여, 실행 가능하다.

<launch>
        <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard">
            <remap from="/cmd_vel" to="turtle1/cmd_vel"/>
        </node>
        <node pkg="turtlesim" type="turtlesim_node" name="turtlesim" />
</launch>
-----------turtlebot3--------------

https://github.com/ROBOTIS-GIT/turtlebot3
master 클릭하면
수많은 패키지로 형성되어있다. (기능별로 패키지 나눠놓았음)
패키지들이 모인것을 메타패키지 라고 부른다.

우리 수업에서는 master branch 에서 옆에 코드를 git clone 주소 입력하여 PC에 저장함.

터미널 src 위치에서
git clone [Code 주소]
git clone https://github.com/ROBOTIS-GIT/turtlebot3.git

설치 완료되면
터미널 cm
만약 cm했는데 오류뜨면(gazobo라는 곳에서 제공하는 시뮬레이션 툴을 설치)
터미널 sudo apt install ros-melodic-turtlebot3-msgs ros-melodic-turtlebot3-gazebo
설치완료 후 터미널 cm

(로봇의 형태 긴것 = burger, 넓적한것 = waffle 이라고 부르니 참고...)
환경변수 설정?
export TURTLEBOT3_MODEL=waffle
echo $TURTLEBOT3_MODEL   (확인)
이렇게하면 환경변수가 설정되지만, 계속 저장된 상태로 유지하려면 bashrc에 입력해놔야한다.
bashrc 오픈하는 명령어를 eb로 저장해놨으므로, 터미널에서 eb
입력해놓은 문구 : export TURTLEBOT3_MODEL=waffle

프로그램 키기(세팅되어있는 프로그램)
roslaunch turtlebot3_gazebo turtlebot3_world.launch

gazebo 프로그램 켜져있는 상태에서 터미널에 아래 명령어를 치면, 로봇이 움직이게 조종 가능.
roslaunch turtlebot3_teleop turtlebot3_teleop_key.launch

프로그램 키기(텅 빈 공간의 프로그램 열기!)
roslaunch turtlebot3_gazebo turtlebot3_empty_world.launch

텅 빈 공간에서 아래 명령어를 입력 하면 내가 조종 가능.
rosrun teleop_twist_keyboard teleop_twist_keyboard.py


만약 텅빈 프로그램 켜놓은 상태에서, 내가 작성한 코드를 적용시키려면 해당코드 실행.
이때 주의할 것은!! 토픽 이름을 맞춰줘야한다. cmd_vel !!!
rosrun yh_turtle_triangle yh_turtle_triangle.py 3

----rviz 사용하여 레이저가 스캔하는 범위 시각적으로 보기-------------
rviz는 서브스크라이브 역할을 하는 놈인데, 토픽을 받아와서 시각화 해준다.
터미널창 rosrun rviz rviz
프로그램 실행 후 왼쪽하단 add클릭
By topic 선택, 맨아래 LaserScan 선택
프로그램 왼쪽 위 Fixed Frame 옆을 base_scan 으로 변경
(base_scan 으로 입력하는 이유는 터미널창에서 rostopic echo /scan/header에서 확인 가능)

LaserScan 눌러서 Size 조정 가능
→ 그러면 최종적으로 레이저가 스캔하는 화면이 보인다.
이 상태에서 터미널창
rosrun teleop_twist_keyboard teleop_twist_keyboard.py
실행해보면 자동차의 움직임에따라 스캔하는 모습을 실시간으로 계속 볼 수 있다.


라이다의 정보, 스펙이 궁금하면?
rostopic info /scan
rosmsg show sensor_msgs/LaserScan

rostopic echo /scan
rostopic echo /scan/ranges
# inf = 센서가 입력받았을때 min or max 값을 오바해서 표현할 수 없으면 inf로 표현.

-------------------------

토픽에서 메시지를 통해서 데이터를 주고받는다.
서비스에서는 서비스서버,서비스클라이언트이고 srv에서 프록시를 사용한다.


로스파일을 저장하는방법(rosbag는 서브스크라이브 역할을 한다.)
-->(rosbag record -o 절대주소/scan)
소문자는 자동으로 파일이름(시간을 기준)을 만들어주고
-->(rosbag record -O 절대주소/ 원하는 이름.bag/scan)
대문자는 사용자 지정으로 파일이름을 만든다.

[터미널창]
rosbag record -o /homeeemingyu/scan_data/ /scan
-->/homeeemingyu/scan_data/폴더아래 /scan 토픽의 메시지를 가져온 후 저장하겠다.
-->명령어를 작성한 시간이 파일명.bag형태로 만들어진다.

rosbag record -O /homeeemingyu/scan_data/test.bag /scan
-->/homeeemingyu/scan_data/폴더아래 /scan 토픽의 메시지를 가져온 후 test.bag이름으로 저장하겠다.
-->사용자가 원하는 이름으로 작성한다.

로스파일 다시 실행하는법
rosbag play 파일이름
-->먼저 실행시킬 파일폴더경로로 들어가서 .bag를 가져온다.
-->그래서 먼저 play를 시켜준다음 rviz를 켠다음 add를 통하여 scan의 파일을 실행해준다.
-->이때 맞춰주어야하는것은 Fixed Frame의 base_scan, size

[터미널창]
homeeemingyu/scan_data/까지 이동한후에 원하는 파일실행하기

Rviz파일을 저장해서 다시 launch 파일로 만드는 방법
1. 자신이 원하는 설정값을 지정한다.
2. File-save config as-[홈디렉토리/유저네임/catkin_ws/src폴더 아래에 내가 원하는 패키지]/rviz 파일저장하기
3. <node pkg="rviz" type="rviz" name="rviz" args = "-d $(find yh_turtle)/rviz/scan.rviz"/>
3-1.뒤에 args자리에 주소값을 적어주면된다.
-d는 rviz의 파일이 가지는 옵션: 입력한 주소값에 있는 파일을 실행시켜라
$(find 폴더명)은 하나의 함수값이다. 입력값은 폴더명이고 출력값은 폴더명이 있는 폴더주소이다.
->런치파일에서만 사용가능하다

turtle1.cmd_vel
/turtle1.cmd_vel